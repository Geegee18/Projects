Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:



	
i. Attribute table =10000

ii. Business table =10000

iii. Category table =10000
iv. Checkin table = 10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


SQL CODE: SELECT 'Attribute' AS name_, COUNT(*) AS count_
FROM attribute
UNION ALL
SELECT 'Business' AS name_, COUNT(*) AS count_
FROM business
UNION ALL
SELECT 'Category' AS name_, COUNT(*) AS count_
FROM category
UNION ALL
SELECT 'Checkin' AS name_, COUNT(*) AS count_
FROM checkin
UNION ALL
SELECT 'Elite_years' AS name_, COUNT(*) AS count_
FROM elite_years
UNION ALL
SELECT 'Friend' AS name_, COUNT(*) AS count_
FROM friend
UNION ALL
SELECT 'Hours' AS name_, COUNT(*) AS count_
FROM hours
UNION ALL
SELECT 'Review' AS name_, COUNT(*) AS count_
FROM review
UNION ALL
SELECT 'Tip' AS name_, COUNT(*) AS count_
FROM tip
UNION ALL
SELECT 'User' AS name_, COUNT(*) AS count_
FROM user;


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


i. Business = 10000 , Key: id
ii. Hours = 1562 , business_id
iii. Category = 2643 ,business_id
iv. Attribute = 1115 ,business_id
v. Review = 10000, id
vi. Checkin = 493 , business_id
vii. Photo = 10000 ,id
viii. Tip = 537 ,user_id
ix. User = 10000 ,id
x. Friend = 11 , user_id
xi. Elite_years = 2780 , user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	


SQL CODE

SELECT 'Business' AS name_, COUNT( DISTINCT id) AS count_
FROM business
UNION ALL
SELECT 'Category' AS name_, COUNT(DISTINCT business_id) AS count_
FROM category
UNION ALL
SELECT 'Checkin' AS name_, COUNT(DISTINCT business_id) AS count_
FROM checkin
UNION ALL
SELECT 'Attribute' AS name_, COUNT(DISTINCT business_id) AS count_
FROM attribute
UNION ALL
SELECT 'Elite_years' AS name_, COUNT(DISTINCT user_id ) AS count_
FROM elite_years
UNION ALL
SELECT 'Friend' AS name_, COUNT(DISTINCT user_id ) AS count_
FROM friend
UNION ALL
SELECT 'Hours' AS name_, COUNT(DISTINCT business_id ) AS count_
FROM hours
UNION ALL
SELECT 'Review' AS name_, COUNT(DISTINCT id ) AS count_
FROM review
UNION ALL
SELECT 'Tip' AS name_, COUNT(DISTINCT user_id ) AS count_
FROM tip
UNION ALL
SELECT 'User' AS name_, COUNT(DISTINCT id ) AS count_
FROM user
UNION ALL
SELECT 'Photo' AS name_, COUNT(DISTINCT id ) AS count_
FROM photo;

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
SELECT *
FROM user
WHERE compliment_photos IS NULL; 

-- I changed the column names to check  which columns were null. I was wondering if there was an easier way to do this.

	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:




	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:	5	avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:	2	avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max:	2000	avg: 24.2995
		



-SQL CODE
SELECT 'Review' as name,
MIN(stars) as minimum,
        MAX(stars) as maximum,
       AVG(stars) as mean
FROM review
UNION ALL
SELECT 'business' as name,
MIN(stars) as minimum,
        MAX(stars) as maximum,
       AVG(stars) as mean
FROM business
UNION ALL
SELECT 'Tip' as name,
MIN(likes) as minimum,
        MAX(likes) as maximum,
       AVG(likes) as mean
FROM tip
UNION ALL
SELECT 'Checkin' as name,
MIN(count) as minimum,
        MAX(count) as maximum,
       AVG(count) as mean
FROM checkin
UNION ALL
SELECT 'user' as name,
MIN(review_count) as minimum,
        MAX(review_count) as maximum,
       AVG(review_count) as mean
FROM user



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city, SUM(review_count) AS number_of_reviews
FROM business
GROUP BY city
ORDER BY number_of_reviews DESC;


	
	Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | number_of_reviews |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:


SELECT  stars as star_rating, COUNT(stars) as count
FROM business
where city = 'Avon'
GROUP BY star_rating;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT  stars as star_rating, COUNT(stars) as count
FROM business
where city = 'Beachwood'
GROUP BY star_rating;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews: The top 3 users as Gerald, Hon and Eric.
		
	SQL code used to arrive at answer:

SSELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIt 3;
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?
  Yes, Most of the users who had an above average review_count tend to have more fans on average. 
This shows there is a liklihood that those who pose more reviews have more fans. 



	Please explain your findings and interpretation of the results:
	SQL CODE 1: 

	SELECT AVG(review_count)
	FROM user;

	SQL CODE 2: 
	SELECT  
    CASE 
    WHEN review_count < 25 THEN 'below' -- average review count is used for creating the conditions
    ELSE "above"
    END review_distribution,
    round(AVG (fans),2) AS 'average_fans'
FROM user
GROUP BY review_distribution;


## Output
I found the average review count using SQL code 1 and then used that to get a review_count distribution.  Then, I found the average fans for these two categories. The output is seen below: 

+---------------------+--------------+
| review_distribution | average_fans |
+---------------------+--------------+
| above               |         7.43 |
| below               |         0.19 |
+---------------------+--------------+


	



9. Are there more reviews with the word "love" or with the word "hate" in them?


	Answer: There are more reviews with the word "love" than "hate". The word "love" is repeated 1780 and "hate" is 232.
	
	SQL code used to arrive at answer:

SELECT 'love',COUNT(*) AS count
FROM review
WHERE text LIKE '%love%'
UNION ALL
SELECT 'hate', COUNT(*) AS count
FROM review
WHERE text LIKE '%hate%';

+--------+-------+
| 'love' | count |
+--------+-------+
| love   |  1780 |
| hate   |   232 |
+--------+-------+
	

10. Find the top 10 users with the most fans: The top ten users are as seen in the output table below. 

	SQL code used to arrive at answer:

SELECT name,fans
FROM user
ORDER BY fans DESC
LIMIT 10;

	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.


I chose Phoenix as the city and for the category I chose restaurant since it had more data points. 
	



i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, it looks like the restaurants in Phoenix tend to hava a different distribution in hours based on their star ratings,
From my analysis it looks like most of the restaurants in Phoenix that had low ratings were open till later in the day than those that had high ratings. For instance, McDonald and Gallagher that had low ratings were the only ones that were open till 12am and 11pm respectively. All the ones with high rating were open till no later than 10 pm. 

SQL Code: 
SELECT b.name,h.hours,
    CASE
        WHEN stars BETWEEN 2 AND 3 THEN 'Low_rating'
        WHEN stars BETWEEN 4 AND 5 THEN 'High_rating'
    END AS star_ratings
FROM (business b INNER JOIN category c) INNER JOIN hours h
ON b.id = c.business_id AND b.id = h.business_id
WHERE star_ratings IS NOT NULL AND b.city = 'Phoenix' AND c.category = 'Restaurants'
ORDER BY star_ratings


RESULTS

+----------------------------------------+-----------------------+--------------+
| name                                   | hours                 | star_ratings |
+----------------------------------------+-----------------------+--------------+
| Bootleggers Modern American Smokehouse | Monday|11:00-22:00    | High_rating  |
| Bootleggers Modern American Smokehouse | Tuesday|11:00-22:00   | High_rating  |
| Bootleggers Modern American Smokehouse | Friday|11:00-22:00    | High_rating  |
| Bootleggers Modern American Smokehouse | Wednesday|11:00-22:00 | High_rating  |
| Bootleggers Modern American Smokehouse | Thursday|11:00-22:00  | High_rating  |
| Bootleggers Modern American Smokehouse | Sunday|11:00-22:00    | High_rating  |
| Bootleggers Modern American Smokehouse | Saturday|11:00-22:00  | High_rating  |
| Charlie D's Catfish & Chicken          | Monday|11:00-18:00    | High_rating  |
| Charlie D's Catfish & Chicken          | Tuesday|11:00-18:00   | High_rating  |
| Charlie D's Catfish & Chicken          | Friday|11:00-18:00    | High_rating  |
| Charlie D's Catfish & Chicken          | Wednesday|11:00-18:00 | High_rating  |
| Charlie D's Catfish & Chicken          | Thursday|11:00-18:00  | High_rating  |
| Charlie D's Catfish & Chicken          | Sunday|13:00-16:00    | High_rating  |
| Charlie D's Catfish & Chicken          | Saturday|11:00-18:00  | High_rating  |
| McDonald's                             | Monday|5:00-23:00     | Low_rating   |
| McDonald's                             | Tuesday|5:00-23:00    | Low_rating   |
| McDonald's                             | Friday|5:00-0:00      | Low_rating   |
| McDonald's                             | Wednesday|5:00-23:00  | Low_rating   |
| McDonald's                             | Thursday|5:00-23:00   | Low_rating   |
| McDonald's                             | Sunday|5:00-23:00     | Low_rating   |
| McDonald's                             | Saturday|5:00-0:00    | Low_rating   |
| Gallagher's                            | Monday|11:00-0:00     | Low_rating   |
| Gallagher's                            | Tuesday|11:00-0:00    | Low_rating   |
| Gallagher's                            | Friday|11:00-2:00     | Low_rating   |
| Gallagher's                            | Wednesday|11:00-0:00  | Low_rating   |
+----------------------------------------+-----------------------+--------------+
(Output limit exceeded, 25 of 28 total rows shown)


ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes, the average number of reviews for the restaurants in Phoenix that had high ratings were much higher than those with low ratings. 

    SQL CODE:

 SELECT 
    CASE
        WHEN stars BETWEEN 2 AND 3 THEN 'Low_rating'
        WHEN stars BETWEEN 4 AND 5 THEN 'High_rating'
    END AS star_ratings,
    round( AVG(review_count),2) as Average_number_reviews
FROM business b INNER JOIN category c
ON b.id = c.business_id 
WHERE  star_ratings IS NOT NULL AND b.city = 'Phoenix' AND c.category = 'Restaurants'
GROUP BY star_ratings



Output:
+--------------+------------------------+
| star_ratings | Average_number_reviews |
+--------------+------------------------+
| High_rating  |                 208.67 |
| Low_rating   |                   34.0 |
+--------------+------------------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No, I am not able to make any inference based on location since there no apparent pattern in the address and there is no information on the neighborhood. 

SQL code used for analysis:

SELECT b.name,
    CASE
        WHEN stars BETWEEN 2 AND 3 THEN 'Low_rating'
        WHEN stars BETWEEN 4 AND 5 THEN 'High_rating'
    END AS star_ratings,
    b.address, b.neighborhood
FROM business b INNER JOIN category c
ON b.id = c.business_id 
WHERE  star_ratings IS NOT NULL AND b.city = 'Phoenix' AND c.category = 'Restaurants'

+----------------------------------------+--------------+---------------------+--------------+
| name                                   | star_ratings | address             | neighborhood |
+----------------------------------------+--------------+---------------------+--------------+
| McDonald's                             | Low_rating   | 1850 S 7th St       |              |
| Bootleggers Modern American Smokehouse | High_rating  | 3375 E Shea Blvd    |              |
| Charlie D's Catfish & Chicken          | High_rating  | 1153 E Jefferson St |              |
| Gallagher's                            | Low_rating   | 751 E Union Hls Dr  |              |
| Matt's Big Breakfast                   | High_rating  | 3118 E Camelback Rd |              |
+----------------------------------------+--------------+---------------------+--------------+


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: This difference was found based on review_count. The average review_count for those that are open is higher than the ones that are not open. 


  SQL CODE:

 SELECT   is_open,
   round(AVG(review_count),2)  AS Average_review_count    
FROM business 
GROUP BY is_open
        

 Output: 

 +---------+----------------------+
| is_open | Average_review_count |
+---------+----------------------+
|       0 |                 23.2 |
|       1 |                31.76 |
+---------+----------------------+



ii. Difference 2: This difference was found based on the count. There seems to more businesses that are open than co
         
         
         
SQL code used for analysis:

SELECT   is_open, count(*) as Count  
FROM business 
GROUP BY is_open

Output

+---------+-------+
| is_open | Count |
+---------+-------+
|       0 |  1520 |
|       1 |  8480 |
+---------+-------+

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         Predict whether there will be high or low ratings based on the state, review_count and the number of times the review was found to be cool, useful or funny.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

            For this analysis, I will need data from the business and review table. The business table have information about the state, the stars and review count and the review table has information about  how cool,funny and useful the comments were. 

            I recoded the stars column so  that I have two category of whether there was high star ratings or low star rating.   

            For the analysis the star ratings; high or low would be converted to 1 or 0 to predict the the ratings. It could be a logistic regression or a decision tree could be built based on the data.  
                  
iii. Output of your finished dataset:


++--------------+-------+--------------+------+--------+-------+
| star_ratings | state | review_count | cool | useful | funny |
+--------------+-------+--------------+------+--------+-------+
| High_rating  | NV    |          251 |    1 |      1 |     1 |
| High_rating  | AZ    |          507 |    0 |      0 |     0 |
| Low_rating   | NV    |           48 |    0 |      5 |     0 |
| High_rating  | ON    |           27 |    0 |      0 |     0 |
| High_rating  | AZ    |           11 |    0 |      0 |     0 |
| Low_rating   | ON    |           30 |    0 |      0 |     0 |
| High_rating  | NV    |          112 |    0 |      0 |     0 |
| High_rating  | AZ    |          711 |    2 |      2 |     2 |
| Low_rating   | AZ    |          244 |    0 |      0 |     0 |
| High_rating  | NV    |          574 |    0 |      0 |     0 |
| High_rating  | ON    |           16 |    0 |      0 |     0 |
| High_rating  | NC    |          299 |    0 |      1 |     0 |
| High_rating  | PA    |           93 |    0 |      0 |     0 |
| Low_rating   | NV    |          147 |    0 |      0 |     0 |
| High_rating  | AZ    |          406 |    1 |      1 |     0 |
| High_rating  | AZ    |          102 |    0 |      1 |     0 |
| High_rating  | NV    |          333 |    0 |      0 |     0 |
| High_rating  | ON    |           32 |    0 |      0 |     0 |
| High_rating  | ON    |           27 |    0 |      0 |     0 |
| High_rating  | WI    |          149 |    0 |      0 |     0 |
| High_rating  | QC    |           52 |    1 |      1 |     1 |
| High_rating  | NV    |          785 |    0 |      0 |     0 |
| High_rating  | PA    |          197 |    0 |      0 |     0 |
| Low_rating   | NV    |          444 |    0 |      0 |     0 |
| High_rating  | NV    |          821 |    0 |      0 |     0 |
+--------------+-------+--------------+------+--------+-------+
(Output limit exceeded, 25 of 463 total rows shown)

         
iv. Provide the SQL code you used to create your final dataset:

SSELECT 
      CASE
        WHEN b.stars BETWEEN 2 AND 3 THEN 'Low_rating'
        WHEN b.stars BETWEEN 4 AND 5 THEN 'High_rating'
    END AS star_ratings
    ,b.state
    ,review_count
    ,r.cool
    , r.useful
    ,r.funny
FROM business b 
INNER JOIN review r 
ON b.id= r.business_id
WHERE star_ratings IS NOT NULL




